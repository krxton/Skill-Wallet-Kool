import { NextResponse, NextRequest } from 'next/server'; 
import prisma from '@/lib/prisma'; 
import cuid from 'cuid'; 

// =======================================================
// 1. INTERFACES & TYPES (‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
// =======================================================
// ... (SegmentResult ‡πÅ‡∏•‡∏∞ CompletionPayload interfaces ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°) ...
interface SegmentResult {
    id: string; 
    text: string;
    maxScore: number; 
    recognizedText?: string;
    audioUrl?: string;
}

interface CompletionPayload {
    activityId: string;
    totalScoreEarned: number;
    segmentResults: SegmentResult[]; 
    evidence?: { 
        videoUrl?: string | null;
        imageUrl?: string | null;
        status?: string; 
    };
}


// =======================================================
// 2. UTILITIES (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ID ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
// =======================================================
const ALLOWED_ORIGIN = 'http://localhost:3001'; 
// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å Array ‡πÄ‡∏õ‡πá‡∏ô ID ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
const TEST_PARENT_ID = "PR2"; 
const TEST_CHILD_ID = "CH2";   

const getRandomTimeSpentSeconds = (): number => {
    return Math.floor(Math.random() * 571) + 30; 
};


// ----------------------------------------------------
// 3. OPTIONS Handler (CORS) (‡πÄ‡∏û‡∏¥‡πà‡∏° Max-Age)
// ----------------------------------------------------
export async function OPTIONS(request: NextRequest) {
    return NextResponse.json({}, {
        status: 200,
        headers: {
            'Access-Control-Allow-Origin': ALLOWED_ORIGIN,
            'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
            'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            'Access-Control-Max-Age': '86400', // ‡πÄ‡∏û‡∏¥‡πà‡∏° Max-Age ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á CORS Preflight
        }
    });
}


// ----------------------------------------------------
// 4. POST Handler (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Quest Completion)
// ----------------------------------------------------
export async function POST(request: Request) {
    // üö® ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ CORS Header ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error Response (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ CORS)
    const corsHeaders = {
        'Access-Control-Allow-Origin': ALLOWED_ORIGIN,
    };

    try {
        const body: CompletionPayload = await request.json(); 
        const { activityId, totalScoreEarned, segmentResults, evidence } = body; 

        if (!activityId || totalScoreEarned === undefined || !segmentResults) {
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS Header
            return NextResponse.json({ error: 'Missing required quest completion fields.' }, { status: 400, headers: corsHeaders });
        }
        
        const scoreToIncrement = Math.floor(totalScoreEarned || 0);
        
        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        const activity = await prisma.activity.findUnique({ where: { id: activityId }, select: { category: true } });
        if (!activity) { 
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS Header
            return NextResponse.json({ error: 'Activity not found in CMS.' }, { status: 404, headers: corsHeaders });
        }
        const questCategory = activity.category;

        // 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î ID ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå
        const finalStatus = "Approved"; 
        
        // ‚úÖ ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
        const parentId = TEST_PARENT_ID;
        const childId = TEST_CHILD_ID;
        
        // 2.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå Parent-Child ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πá‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Response
        const childData = await prisma.child.findUnique({ 
            where: { id: childId },
            select: { 
                fullName: true, // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Response
                parents: { // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Parent ‡∏ô‡∏µ‡πâ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Child ‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á
                    where: { parentId: parentId },
                    select: { parentId: true }
                }
            } 
        });

        // 2.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏î‡πá‡∏Å, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏î‡πá‡∏Å‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ
        if (!childData || childData.parents.length === 0) {
            // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS Header
            return NextResponse.json(
                { error: `Child ID ${childId} not found or not linked to Parent ID ${parentId}. Check test IDs and seed data.` }, 
                { status: 404, headers: corsHeaders }
            );
        }
        
        const childFullName = childData.fullName; // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡πá‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Response
        
        let timeSpentToSave: number | undefined = undefined; 
        
        if (questCategory === '‡∏î‡πâ‡∏≤‡∏ô‡∏†‡∏≤‡∏©‡∏≤' || questCategory === '‡∏î‡πâ‡∏≤‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢') {
            timeSpentToSave = getRandomTimeSpentSeconds(); 
        }

        // ----------------------------------------------------
        // 3. ‡∏ó‡∏≥ TRANSACTION: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Record
        // ----------------------------------------------------
        
        const detailResultsObject: any = {
            questType: questCategory,
            results: segmentResults, 
            evidence: evidence || null,
        }; 

        const record = await prisma.$transaction(async (tx) => {
            
            // a. ‡∏ô‡∏±‡∏ö‡∏£‡∏≠‡∏ö (Count from ActivityRecord)
            const latestRoundRecord = await tx.activityRecord.aggregate({
                _max: { roundNumber: true },
                where: {
                    childId: childId, // ‚úÖ ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                    activityId: activityId,
                    status: 'Approved', 
                },
            });

            const maxRound = latestRoundRecord._max.roundNumber || 0;
            const newRoundNumber = maxRound + 1;
            
            // b. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏î‡πá‡∏Å
            await tx.child.update({
                where: { id: childId }, // ‚úÖ ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                data: {
                    score: { increment: scoreToIncrement }
                }
            });

            // c. ‡∏™‡∏£‡πâ‡∏≤‡∏á Record (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à)
            return tx.activityRecord.create({
                data: {
                    id: cuid(), 
                    activityId: activityId,
                    parentId: parentId, // ‚úÖ ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                    childId: childId, ¬† // ‚úÖ ‡πÉ‡∏ä‡πâ ID ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
                    dateCompleted: new Date(),
                    timeSpentSeconds: timeSpentToSave,
                    scoreEarned: totalScoreEarned,
                    status: finalStatus,
                    detailResults: detailResultsObject, 
                    roundNumber: newRoundNumber, 
                },
            });
        });

        // 4. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° Header CORS ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
        // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Response
        const responseMessage = `${childFullName} ‡∏ó‡∏≥‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß! (‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà ${record.roundNumber})`;
        
        return NextResponse.json({
            message: responseMessage, 
            recordId: record.id,
            roundNumber: record.roundNumber, 
            totalScore: totalScoreEarned,
        }, {
            status: 200,
            headers: corsHeaders, // ‚úÖ ‡πÉ‡∏ä‡πâ CORS Header
        });

    } catch (error) {
        console.error('Error recording quest completion in CMS:', error);
        
        let errorMessage = 'Failed to record quest completion in CMS.';
        if (typeof error === 'object' && error !== null && 'code' in error && (error as any).code === 'P2003') {
            errorMessage = 'Foreign Key Error: Parent/Child ID does not exist. Check your seed data.';
        }
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° CORS Header ‡πÉ‡∏ô 500 Response
        return NextResponse.json({ error: errorMessage }, { status: 500, headers: corsHeaders });
    }
}