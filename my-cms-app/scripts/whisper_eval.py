# scripts/whisper_eval.py

import sys
import json
import whisper
import os
import re

# ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Encoding ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö stdout (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Windows/UTF-8)
try:
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')
except AttributeError:
    pass

if len(sys.argv) < 3:
    print(json.dumps({"error": "Usage: python whisper_eval.py <audio_path> <expected_text>"}))
    sys.exit(1)

audio_path = sys.argv[1]
expected_text = sys.argv[2]

# ----------------------------------------------------------------
# Utility: Clean Text (‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï‡∏≠‡∏ô)
# ----------------------------------------------------------------
def clean_text(text):
    text = text.lower()
    text = re.sub(r'[^\w\s]', '', text)  # ‡∏•‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡∏£‡∏£‡∏Ñ‡∏ï‡∏≠‡∏ô
    return text.strip()

try:
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Whisper 
    model = whisper.load_model("base")

    # ‡∏ñ‡∏≠‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° initial_prompt ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ AI ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
    result = model.transcribe(
        audio_path,
        language="en",
        initial_prompt="This is an English sentence."
    )
    recognized_text_raw = result["text"]

    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    recognized_text = clean_text(recognized_text_raw)
    cleaned_expected = clean_text(expected_text)

    # ----------------------------------------------------------------
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Fixed Matching Logic)
    # ----------------------------------------------------------------
    expected_words = cleaned_expected.split()
    recognized_words = recognized_text.split()

    # üÜï 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á Frequency Map ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    expected_word_counts = {}
    for word in expected_words:
        expected_word_counts[word] = expected_word_counts.get(word, 0) + 1

    match_count = 0

    # üÜï 2. ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
    for rec_word in recognized_words:
        if rec_word in expected_word_counts and expected_word_counts[rec_word] > 0:
            match_count += 1
            expected_word_counts[rec_word] -= 1  # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

    # 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Accuracy
    if len(expected_words) == 0:
        accuracy = 100
    else:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô) / (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á) * 100
        accuracy = int(match_count / len(expected_words) * 100)
        accuracy = min(accuracy, 100)

    # üÜï Debug Log
    print(f"DEBUG: Expected Text: {expected_text}", file=sys.stderr)
    print(f"DEBUG: Clean Rec Text: {recognized_text}", file=sys.stderr)
    print(f"DEBUG: Match Count: {match_count} / {len(expected_words)}", file=sys.stderr)

    # ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å JSON
    output_json = {
        "text": recognized_text_raw,
        "score": accuracy
    }

    print(json.dumps(output_json, ensure_ascii=False))

except Exception as e:
    print(json.dumps({"error": f"Python AI Runtime Error: {str(e)}", "path": audio_path}), file=sys.stderr)
    sys.exit(1)
