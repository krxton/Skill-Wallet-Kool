// lib/services/activity_service.dart

import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:flutter/foundation.dart';
import 'api_service.dart';
import '../models/activity.dart';
import 'package:collection/collection.dart';

class ActivityService {
  final ApiService _apiService = ApiService();
  static const String _oEmbedEndpoint = 'https://www.tiktok.com/oembed?url=';

  // 1. Helper Function: ‡∏î‡∏∂‡∏á OEmbed Data ‡∏à‡∏≤‡∏Å TikTok API
  Future<Map<String, dynamic>> _fetchTikTokOEmbedData(String videoUrl) async {
    final cleanUrl = videoUrl.split('?').first;
    final oEmbedUrl =
        Uri.parse('$_oEmbedEndpoint$cleanUrl&maxwidth=600&maxheight=800');

    final response = await http.get(oEmbedUrl);

    if (response.statusCode == 200) {
      return jsonDecode(response.body) as Map<String, dynamic>;
    } else {
      debugPrint('TikTok OEmbed Error: ${response.statusCode}');
      throw Exception('Failed to load TikTok OEmbed data.');
    }
  }

  // üÜï Helper Function: ‡∏î‡∏∂‡∏á Activity ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Backend (API Call ‡∏´‡∏•‡∏±‡∏Å)
  Future<List<Activity>> _fetchAllActivities() async {
    try {
      final List<dynamic> responseList = await _apiService.getArray(
        path: '/activities',
        queryParameters: {},
      );

      return responseList
          .map((json) => Activity.fromJson(json as Map<String, dynamic>))
          .toList();
    } catch (e) {
      throw Exception('Failed to load ALL activities from backend: $e');
    }
  }

  /// 2. ‡∏î‡∏∂‡∏á Physical Activity Clip (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô CLIP VDO)
  Future<Activity?> fetchPhysicalActivityClip(String childId) async {
    try {
      final allActivities = await _fetchAllActivities();

      // 2.1 ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Flutter: ‡∏´‡∏≤ '‡∏î‡πâ‡∏≤‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢' ‡∏ó‡∏µ‡πà‡∏°‡∏µ videoUrl
      final physicalActivity = allActivities.firstWhereOrNull(
        (a) => a.category == '‡∏î‡πâ‡∏≤‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢' && a.videoUrl != null,
      );

      if (physicalActivity != null && physicalActivity.videoUrl != null) {
        // 2.2 ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OEmbed API
        final oEmbedData =
            await _fetchTikTokOEmbedData(physicalActivity.videoUrl!);

        // 2.3 ‡∏ú‡∏™‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        final Map<String, dynamic> activityJson = physicalActivity.toJson();
        activityJson['thumbnailUrl'] = oEmbedData['thumbnail_url'];
        activityJson['tiktokHtmlContent'] = oEmbedData['html'];

        return Activity.fromJson(activityJson);
      }
      return null;
    } catch (e) {
      debugPrint('Error fetching physical clip (C-Side): $e');
      return null;
    }
  }

  /// 3. ‡∏î‡∏∂‡∏á Popular Activities (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• TikTok URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
  Future<List<Activity>> fetchPopularActivities(String childId) async {
    try {
      final allActivities = await _fetchAllActivities();

      // 1. ‡∏ó‡∏≥ Logic 'Popular' ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢: ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
      final popularList = allActivities.take(3).toList();

      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á List ‡∏Ç‡∏≠‡∏á Future ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OEmbed
      final List<Future<Activity>> processedActivitiesFutures =
          popularList.map((activity) async {
        // üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ videoUrl ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡πÅ‡∏•‡∏∞ Category ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (activity.videoUrl != null &&
            (activity.category.toUpperCase() == '‡∏î‡πâ‡∏≤‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢')) {
          try {
            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OEmbed API
            final oEmbedData = await _fetchTikTokOEmbedData(activity.videoUrl!);

            // ‡∏ú‡∏™‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            final Map<String, dynamic> activityJson = activity.toJson();
            activityJson['thumbnailUrl'] = oEmbedData['thumbnail_url'];
            activityJson['tiktokHtmlContent'] = oEmbedData['html'];

            return Activity.fromJson(activityJson);
          } catch (e) {
            // ‡∏ñ‡πâ‡∏≤ OEmbed ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏™‡∏µ‡∏¢) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô Activity ‡πÄ‡∏î‡∏¥‡∏°
            debugPrint('OEmbed failed for ${activity.name}: $e');
          }
        }
        return activity; // ‡∏Ñ‡∏∑‡∏ô Activity ‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Video ‡∏´‡∏£‡∏∑‡∏≠ OEmbed ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
      }).toList();

      // 3. ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OEmbed ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      final List<Activity> processedActivities =
          await Future.wait(processedActivitiesFutures);

      return processedActivities;
    } catch (e) {
      debugPrint('Error fetching popular activities (C-Side): $e');
      return [];
    }
  }
}
